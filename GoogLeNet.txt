import tensorflow as tf
from tensorflow import keras


class InceptionV1Block(keras.layers.layer):

    def __init__(self, num1x1, num3x3_reduce, num3x3, num5x5_reduce, num5x5, num_pool_proj):

        super(InceptionV1Block, self).__init__()

        self.conv1x1 = keras.layers.Con2D(filters=num1x1, kernel_size=(1, 1), strides=(1, 1), padding='same', activation='relu')

        self.conv3x3_reduce = keras.layers.Con2D(filters=num3x3_reduce, kernel_size=(1, 1), strides=(1, 1), padding='same', activation='relu')
        self.conv3x3 = keras.layers.Con2D(filters=num3x3, kernel_size=(3, 3), strides=(1, 1), padding='same', activation='relu')

        self.conv5x5_reduce = keras.layers.Con2D(filters=num5x5_reduce, kernel_size=(1, 1), strides=(1, 1), padding='same', activation='relu')
        self.conv5x5 = keras.layers.Con2D(filters=num5x5, kernel_size=(5, 5), strides=(1, 1), padding='same', activation='relu')

        self.max_pool = keras.layers.MaxPool2D(pool_size=(3, 3), strides=(1, 1), padding='same')
        self.pool_proj = keras.layers.Con2D(filters=num_pool_proj, kernel_size=(1, 1), strides=(1, 1), padding='same', activation='relu')

	def call(self, inputs):

        activation1x1 = self.conv1x1(inputs)

        activation3x3_reduce = self.conv3x3_reduce(inputs)
        activation3x3 = self.conv3x3(activation3x3_reduce)

        activation5x5_reduce = self.conv5x5_reduce(inputs)
        activation5x5 = self.conv5x5(activation5x5_reduce)

        pool = self.max_pool(inputs)
        pool_reduce = self.pool_proj(pool)

        filter_concat = keras.layers.Concatenate(axis=-1)([activation1x1, activation3x3, activation5x5, pool_reduce])

        return filter_concat


class GoogLeNet(keras.Model):

    def __init__(self):

        super(GoogLeNet, self).__init__()

        // stage-1
        self.conv1 = keras.layers.Con2D(filters=64, kernel_size=(7, 7), strides=(2, 2), padding='same', activation='relu')
        self.max_pool_1 = keras.layers.MaxPool2D(pool_size=(3, 3), strides=(2, 2), padding='same')

        // stage-2
        self.conv2_reduce = keras.layers.Con2D(filters=64, kernel_size=(1, 1), strides=(1, 1), padding='same', activation='relu')
        self.conv2 = keras.layers.Con2D(filters=192, kernel_size=(3, 3), strides=(1, 1), padding='same', activation='relu')
        self.max_pool_2 = keras.layers.MaxPool2D(pool_size=(3, 3), strides=(2, 2), padding='same')

        // stage-3
        self.inception_3a = InceptionV1Block(num1x1=64, num3x3_reduce=96, num3x3=128, num5x5_reduce=16, num5x5=32, num_pool_proj=32)
        self.inception_3b = InceptionV1Block(num1x1=128, num3x3_reduce=128, num3x3=192, num5x5_reduce=32, num5x5=96, num_pool_proj=64)
        self.max_pool_3 = keras.layers.MaxPool2D(pool_size=(3, 3), strides=(2, 2), padding='same')

        // stage-4
        self.inception_4a = InceptionV1Block(num1x1=192, num3x3_reduce=96, num3x3=208, num5x5_reduce=16, num5x5=48, num_pool_proj=64)
        self.inception_4b = InceptionV1Block(num1x1=160, num3x3_reduce=112, num3x3=224, num5x5_reduce=24, num5x5=64, num_pool_proj=64)
        self.inception_4c = InceptionV1Block(num1x1=128, num3x3_reduce=128, num3x3=256, num5x5_reduce=24, num5x5=64, num_pool_proj=64)
        self.inception_4d = InceptionV1Block(num1x1=112, num3x3_reduce=144, num3x3=288, num5x5_reduce=32, num5x5=64, num_pool_proj=64)
        self.inception_4e = InceptionV1Block(num1x1=256, num3x3_reduce=160, num3x3=320, num5x5_reduce=32, num5x5=128, num_pool_proj=128)
        self.max_pool_4 = keras.layers.MaxPool2D(pool_size=(3, 3), strides=(2, 2), padding='same')

        // stage-5
        self.inception_5a = InceptionV1Block(num1x1=256, num3x3_reduce=160, num3x3=320, num5x5_reduce=32, num5x5=128, num_pool_proj=128)
        self.inception_5b = InceptionV1Block(num1x1=384, num3x3_reduce=192, num3x3=384, num5x5_reduce=48, num5x5=128, num_pool_proj=128)

        // classifier
        self.avg_pool = keras.layers.AveragePooling2D(pool_size=(7, 7), strides=(1, 1), padding='valid')
        self.dropout = keras.layers.Dropout(rate=0.4)
        self.fc = keras.layers.Dense(units=1000)

    def call(self, inputs):

